В Java нет свободных функций и переменных. Весь код находится в классах.
Некоторые возможности из С++ опущены (перегрузка операторов, беззнаковые числа) для
упрощения кода.

Литералы:
  Числовые:
    0b11101010
    0111111111
    0x11111111
    1111111111
  С плавающей точкой:
    23.5F
    .5f,
    0x.5FPOF
    0x.5P-6f
  Символы:
    'a'
    'Z'
    '\u0231'
  Булевые:
    true
    false
  Null:
    null
  Строковый:
    "Hello, World"

Начиная с Java 10 есть возможность вывода типов. Например:
  var stream = new FileOutputStream("file.txt");

Поддерживаются блоки кода, как и в С++:
  void f() {
  	{
  	  block..
  	}
  }

Комментарии:
  // 1
  /* 2 */

Программа на Java состоит только из объявления классов в качестве глобальных объектов.
Метод main находится в классе и помечен как static.

Пакеты используются для группировки классов в один модуль. С помощью пакетов можно
управлять доступом для классов.

package my_app.lib;

public class Class {}

Публичный класс должен иметь то же имя, что и его файл.

Import позволяет обращаться к классам внутри пакетов без написания полного пути к ним.
import java.util.*; означает импорт всех классов внутри пакета java.util;
Import static позволяет обращаться к переменным внутри класса, например:
  import static java.lang.System.out;
  out.println("");

  import static java.lang.System.*;
Import static может использоваться с enum'ами.
  public enum ColorName {
  	RED, BLUE
  };

Все операторы как в С++, за исключением instanceof.
Switch идентичен таковому в С++, однако с Java 14 можно делать так:
  var result = switch(ch) {
    case 'A' -> Result.GREAT;
    case 'B', 'C' -> Result.FINE;
    default -> throw new BadException();
  }
Можно также использовать yield для тех же целей, он предупреждает fall-through в case.
  var result = switch(ch) {
    case 'A': yield Result.GREAT;
    case 'B':
    case 'C': yield Result.FINE;
    default: throw new BadException();
  }

Циклы for, do, while, do while идентичны таковым в С++. Присутствует range for.
  for (int i : Array) {}

Break позволяет прерывать внешные циклы:
  outer;
  for (int i = 0; i < 10; i++) {
    while (true) {
      break outer;
    }
  }

Continue позволяет пропускать итерацию по метке как break.

Return идентичен таковому в С++.

Try-catch блоки включаю в себя блок finally, который выполняется в любом случае.
Catch позволяет перехватывать несколько типов исключений:
  try {
    
  } catch (IOException | IllegalArgumentException ex) {
  	report(ex);
  }

Try with resources:
  try (
  	FileOutputStream fos = new FileOutputStream("filename");
  ) {
  	
  } catch (IOException ex) {
    report(ex);
  }
  Или
  FileOutputStream fos = new FileOutputStream("filename");
  try (fos; ...) {
  	
  } catch (IOException ex) {
    report(ex);
  }

Синхронизация:
  synchronized {
    // ...
  }
  Идентично
  mutex mtx;
  mtx.lock();
  // ...
  mtx.unlock();

Assert позволяет делать проверки. Если они не выполняются - кидается исключение.
  assert n != 0;
  assert n != 0 : "Assertion failed";

Boxing & unboxing - перевод примитивного типа в ссылочный.
  int i = 0;           
  interer refI = i;    // Box
  int fromRefI = refI; // Unbox

Ссылочные типы - классы, интерфейсы и массивы. Они аллоцируются на куче и переменной
присваивается ссылка на ресурс. При завершении блока счётчик ссылок на эту переменную
уменьшается, и если он равен 0 - сборщик мусора удаляет ресурс. Ссылка равна null если
ей не присвоено никакого ресурса.

Массивы создаются в рантайме. Длина массива не может быть изменена.
  int[] numbers = new int[5];
  int[] numbers = new int[]{1, 2, 3, 4, 5};
  int[] numbers = {1, 2, 3, 4, 5}; // Сокращённая форма
Многомерные массивы:
  int[][] numbers = new int[2][];
  numbers[0] = new int[3];
  numbers[1] = new int[2];

Java позволяет делать вложенные классы.
  class Outer {
    class Nested {} // Имеет доступ к приватным полям Outer
  }
  class Outer {
    static class Nested {} // Не имеет доступа к приватным полям Outer
  }
  class Outer {
    void f() {
      class Nested {} // Локальный класс
    }
    void f() {
      new Object() {} // Локальный класс-наследний Object
    }
  }

Инстанцирование происходит как:
  Foo foo = new Foo();
Доступ к членам-переменным или функциям осуществляется через точку(.).
Доступ к статическим членам-переменным или функциям осуществляется так:
  class Class {
    public static void f() {}
  }

  Class.f();

Модификаторы класса:
  abstract - Класс не может быть инстанцирован
    static - Используется только для классов-членов
     final - Класс не может быть унаследован
  strictfp - Определяет строгие FP-операции по IEEE 754 (???)

Конструкторы могут принимать любое кол-во параметров.
  class Class {
  	String str;
  	Class(String str) {
  	  this.str = str;
  	}
  }

Статические поля класса можно инициализировать так:
  class Class {
    static {
      // ...
    }
  }

Можно также инициализировать статические переменные так:
  class Class {
    {
      // ...
    }
  }

Деструкторов в классах нет, но можно переопределить метод finalize().

Методы похожи на таковые в С++, но они не могут иметь установленны по умолчанию
аргументы. Поддерживается перегрузка функций.

Ключевое слово throws перечисляет список исключений, которые могут быть выброшены:
  void f() throws IOException {}

Список параметров переменной длины:
  void f(int... numbers) {
    for (int i : numbers) {}
  }
  f(1, 2, 3, 4)

Наследование поддерживается только от одного класса. Наследование реализуется словом
extends. Все классы неявно наследуют java.lang.Object.

Слово super вызывает конструктор класса-родителя.

В отличие от С++, все не-final методы являются virtual неявно и могут быть переопре-
делены с помощью @Override.

Абстрактный класс - неполный класс.
