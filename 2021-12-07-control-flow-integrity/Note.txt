Clang имеет флаги диагностики -fsanitize=cfa-...

cfi-cast-strict

cfi-derived-cast - неправильный каст от родителя к наследнику
  
cfi-unrelated-cast - каст void* к неверному исходя из контекста типу

cfi-nvcall - не-виртуальный вызов метода объекта, чей vptr неверного типа

cfi-vcall - виртуальный вызов метода объекта, чей vptr неверного типа

cfi-icall - непрямой (indirect) вызов у объекта. Динамический тип функции должен
совпадать со статическим типом во время вызова.

cfi-mfcall - непрямой вызов через указатель на метод

по умолчанию CFI остановит программу, которая нарушила её правила
для печати сообщения об ошибке можно использовать -fno-sanitize-trap =(???)
Оверхед по производительности ~1%
Оверхед по размеру бинарника ~15%. -fsanitize=cfi, -flto и -fvisibility должны использоваться вместе.

Каждый юнит трансляции использующий cfi-icall должен быть статически слинкован с программой или библиотекой
-fsanitize-cfi-icall-generalize-pointers ослабевает проверку cfi-icall. Например, char*, char** и int* считаются эквивалентными.
Однако char* и const char* всё-же отличаются.

-fsanitize=function обычно используется для дебага. Делает больше работы, что требует больше времени. Использует RTTI (run-time type information).
-fsanitize=cfi-icall используется в проде, так как оверхед по производительности очень мал 
-fsanitize=cfi-icall может использоваться в С/С++, -fsanitize=function только в С++
