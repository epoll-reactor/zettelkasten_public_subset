Атомарные переменные используются для синхронизации разделяемых данных между
потоками. Разные модели памяти определяют насколько сильна связь между этими
данными. Более слабые модели накладывают меньше ограничений производительности.

Каждый атомик имеет операции load() и store().
atomic_var_1.store(atomic_var_2.load());
  vs
var_1 = var_2;

Обычно такие операции имеют второй дополнительный параметр, задающий модель
памяти для синхронизации. Их существует 3:
1) Sequentially Consistent (последовательно согласованный)
     Стандартная модель, используемая если никакие другие не указаны. Самая
     строгая. Может быть указана явно как memory_order_seq_cst.
     +--------------------+--------------------+
     |      Thread 1      |      Thread 2      |
     +--------------------+--------------------+
     | y = 1;             | if (x.load() == 2) |
     | x.store(2);        |   assert (y == 1); |
     +--------------------+--------------------+
     Т.к "x" и "y" не связаны. Модель памяти гарантирует что ассерт не
     провалится. При x.load() компилятор должен знать что ВСЕ операции были
     завершены прежде чем будет выполнен x.store() в другом потоке. Это
     значит, что оптимизатор не может переупорядочить store'ы().
     С практической точки зрения все операции действуют как барьеры оптими-
     затора. В общем это наиболее предпочтительная модель памяти ибо ошибиться
     сложнее.

2) Relaxed
     Противоположный подход к seq_cst. Позволяет уменьшить уровень синхро-
     низации за счёт удаления проверок happens-before. Используется если
     программист просто хочет чтобы переменная была атомарной по своей при-
     роде без синхронизации каких-то разделяемых данных.

3) Aquire/Release
    Гибрид между вышестоящими двумя методами. Похож на Sequentially Consistent
    метод, но с применением happens-before проверок к зависимым переменным.
    Это позволяет ослабить уровень синхронизации независимых друг от друга
    чтений и записей.

4) Consume
    Более тонкое уточнение Aquire/Release, удаляющее happens-before проверки
    для независимых разделяемых данных.

+--------------------+--------------------------+--------------------------+
|      Thread 1      |         Thread 2         |           Thread 3       |
+--------------------+--------------------------+--------------------------+
| y.store(20);       | if (x.load() == 10) {    | if (y.load() == 10) {    |
| x.store(10);       |   assert(y.load() == 20) |   assert(x.load() == 10) |
|                    |   y.store(10);           | }                        |
|                    | }                        |                          |
+--------------------+--------------------------+--------------------------+

Seq_cst - все переменные должны быть синхронизированы между всеми потоками.

acq_rel - только первый и второй поток синхронизируются и только не-коммута-
          тивные между собой данные. Thread 3 не включён в этот процесс,
          поэтому assert в третьем потоке может провалиться.

release store и consume load
        - Тоже самое, что и acq_rel, но с ослабленной синхронизацией.

relaxed - Синхронизации нет совсем.

ВАЖНО: мешать между собой много режимов нельзя, это запутывает программу и
ведёт к непредсказуемым результатам. Смешивать seq_cst и acq_rel можно, но
очень аккуратно.
