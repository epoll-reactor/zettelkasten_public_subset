Контейнеры STL предоставляют один способ доступа и работы с данными. std::set хранит элементы отсортирован-
ными в виде дерева; std::list позволяет быстро вставлять элементы в произвольном порядке и т.д.. Иногда
возникает нужда в разных способах доступа к одним и тем же данным. Такую возможность предоставляет
boost::multi_index_container.

Multi index взял концепты доступа по индексам из теории СУБД. Эта библиотека плавно интегрируется в дизайн
контейнеров и функций из STL.

/                insert()...       find() ...
|              __|_______|__     __|_______|__
|  Index      | |--.....--| |   | |--.....--| |
|  interfaces | |--.....--| |   | |--.....--| |
|              -------------     -------------
\              Indexed by        Indexed by
               shape             number
                        \         /
/                    _______________
|                   /    .    .     \
| Storage           |    . . . .    |
|                   \_______________/
\                    Elements in multi index container

               .........................
               
       Схема multi_index_container с двумя индексами.

Интерфейсы действуют как "представление" внутренней коллекции элементов.

Например, имея структуру
    struct employee {
        int         id;
        std::string name;
    };,
мы можем определить лишь один способ, допустим, вставки в std::set<employee> по ID или имени. Допустим,
уже имея сортировку по ID, нам нужно вывести всех работников в алфавитном порядке их имён. В таком случае,
мы можем
    1) скопировать всё в вектор и отсортировать его по придекату;
    2) держать вторую структуру, реализующую сортировку по имени.

Эта проблема решается следующим образом:
    // Контейнер с несколькими индексами по ID и имени.
    using employee_set = multi_index_container<
        employee,
        indexed_by<
            // Сортировка с employee::operator<.
            ordered_unique<identity<employee>>,
            // Сортировка с std::less<std::string>.
            ordered_non_unique<member<employee, std::string, &employee::name>>
        >
    >;

    void print_by_name(const employee_set &set) {
        // Получение представления по индексу #1 (имя).
        const employee_set::nth_index<1>::type &name_index = set.get<1>();
        // Использование name_index как обычный std::set.
        std::copy(
      	    name_index.begin(), name_index.end(),
      	    std::ostream_iterator<employee>(std::cout));
    }

Вместо set.get<1>() мы можем писать set.begin().
