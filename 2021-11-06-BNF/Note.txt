BNF используется для формального описания синтаксиса.
Например, инструкция if-else может иметь вид:
  if ( выражение ) инструкция else инструкция
Используя переменную expr для обозначения выражения и stmt для обозначения
инструкции, это правило можно записать как:
  stmt -> if ( expr ) stmt else stmt
Здесь часть слева "->" называется заголовком или левой частью продукции.
Часть после "->" называется телом или правой частью продкуции.

Символ "->" можно прочесть как "имеет вид". Такое правило называется продукцией.
В продукции лексические элементы наподобие if и скобок называются терминалами.
Переменные наподобие expr и stmt представляют последовательности термниалов и
называются нетерминалами.
Дословно terminate значит прекратить. Нетерминал - выражение, способное
раскрываться рекурсивно, например само в себя.

Грамматика определяется перечислением её продукций.
Например, грамматику, описывающую выражения вида "1", "7 + 5 - 1 - 2" можно
выразить как:
  list -> list + digit
  list -> list - digit
  list -> digit
 digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
Одинаковые продукции можно сгруппировать:
  list -> list + digit | list - digit | digit

Грамматика "выводит", или "порождает" строки начиная со стартового символа.
Строки токенов, порождаемые из стартового символа образуют язык, определяемый
грамматикой.

Список параметров вызова функции в ЯП можно описать так:
       call -> id ( optparams )
  optparams -> params | e
     params -> params , param | param
Так как вызов может иметь вид (), нужно допускать и пустую строку символов.
Для этого служит optparams и запись "e" (эпсилон).
