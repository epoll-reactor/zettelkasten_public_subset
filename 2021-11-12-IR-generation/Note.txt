Трёхадресный код - одно из промежуточных представлений программы.
Хоть компилятор может и не строить такой код в теории, он безусловно нужен для
хоть сколь-нибудь серьёзных оптимизаций.

После того, как синтаксическое дерево полностью построено, в его корне вызывается
функция gen(), создающая промежуточное представление.

Трёхадресный код представлен как линейная, безусловная последовательность
команд. Доступные ему операции:
  *) Классические операторы
     x = y op z
  *) Присваивание
     x = y
  *) Запись/чтение из массива
     x[ y ] = z
     x = y[ z ]
  *) Условные переходы
     iffalse x goto L
     iftrue  x goto L
  *) Безусловные переходы
     goto L

Пример узла AST, реализующего генерацию пром. представления, при условии, что
все остальные узлы AST имеют функци gen()

  class If extends Stmt {
    Expr E; Stmt S;

    public If(Expr e, Stmt s) {
      E = e; S = s; after = new_label();
    }

    public void gen() {
      Expr n = E.rvalue();
      emit("iffalse " + n.to_string() + " goto " + after);
      S.gen();
      emit(after + ":");
    }
  }

Например, для выражения
  a[i] = 2 * a[j - k]
генерируется код
  t3 = j - k
  t2 = a[ j ]
  t1 = 2 * t2
  a[ i] = t1
